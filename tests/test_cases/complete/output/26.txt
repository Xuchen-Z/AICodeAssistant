class Node:
    def __init__(self, pos_x, pos_y, goal_x, goal_y, g_cost, parent):
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.goal_x = goal_x
        self.goal_y = goal_y
        self.g_cost = g_cost
        self.parent = parent
    
    def calculate_heuristic(self):
        dx = abs(self.pos_x - self.goal_x)
        dy = abs(self.pos_y - self.goal_y)
        return dx + dy
    
    def __lt__(self, other):
        return self.f_cost < other.f_cost
    
    def __eq__(self, other):
        return self.pos == other.pos

class GreedyBestFirst:
    def __init__(self, grid, start, goal):
        self.grid = grid
        self.start = Node(start[1], start[0], goal[1], goal[0], 0, None)
        self.target = Node(goal[1], goal[0], goal[1], goal[0], 99999, None)
        
        self.open_nodes = [self.start]
        self.closed_nodes: list[Node] = []
        
        self.reached = False
    
    def search(self):
        """
        Search for the path,
        if a path is not found, only the starting position is returned
        """
        while self.open_nodes:
            # Open Nodes are sorted using __lt__
            current_node = self.open_nodes.pop(0)
            
            if current_node.pos == self.target.pos:
                self.reached = True
                return self.retrace_path(current_node)
            
            self.closed_nodes.append(current_node)
            successors = self.get_successors(current_node)
            
            for child_node in successors:
                if child_node in self.closed_nodes:
                    continue
                
                if child_node not in self.open_nodes:
                    self.open_nodes.append(child_node)
        
        return []
    
    def retrace_path(self, node):
        """
        Retrace the path from parents to parents until start node
        """
        current_node = node
        path = []
        while current_node is not None:
            path.append((current_node.pos_y, current_node.pos_x))
            current_node = current_node.parent
        path.reverse()
        return path
    
    def get_successors(self, node):
        """
        Get the successors of a given node
        """
        successors = []
        for i in range(-1, 2):
            for j in range(-1, 2):
                if (i, j) != (0, 0) and self.grid[node.pos_x + i][node.pos_y + j] == 0:
                    successor = Node(node.pos_x + i, node.pos_y + j, node.goal_x, node.goal_y, node.g_cost + 1, node)
                    successors.append(successor)
        
        return successors
    
    def calculate_f_cost(self, node):
        """
        Calculate the f cost of a given node
        """
        dx = abs(node.pos_x - self.target.pos_x)
        dy = abs(node.pos_y - self.target.pos_y)
        return node.g_cost + (dx + dy) * 10